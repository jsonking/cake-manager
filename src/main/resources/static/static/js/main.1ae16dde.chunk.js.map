{"version":3,"sources":["components/AddCake.js","components/CakeApp.js","App.js","serviceWorker.js","index.js"],"names":["AddCake","props","useState","open","setOpen","name","description","imageURL","cake","setCake","handleClose","handleChange","event","target","value","style","margin","onClick","Dialog","onClose","DialogTitle","DialogContent","type","placeholder","onChange","DialogActions","addCake","CakeApp","fetchCakes","url","process","REACT_APP_CAKE_API_ENDPOINT","join","fetch","then","response","json","responseData","setState","cakes","catch","err","console","error","state","method","headers","body","JSON","stringify","res","this","columns","Header","Cell","height","width","src","original","alt","accessor","className","data","minRows","Component","App","AppBar","position","color","Toolbar","Typography","variant","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uYAmDeA,EA7CC,SAACC,GAAW,IAAD,EAECC,oBAAS,GAFV,mBAEhBC,EAFgB,KAEVC,EAFU,OAGCF,mBAAS,CAC7BG,KAAK,GAAIC,YAAY,GAAIC,SAAU,KAJhB,mBAGhBC,EAHgB,KAGVC,EAHU,KAajBC,EAAc,WAChBN,GAAQ,IAGNO,EAAe,SAACC,GAClBH,EAAQ,eAAID,EAAL,eAAWI,EAAMC,OAAOR,KAAOO,EAAMC,OAAOC,UAQvD,OACI,6BACI,4BAAQC,MAAO,CAACC,OAAO,IAAKC,QApBZ,WACpBb,GAAQ,KAmBJ,YACA,kBAACc,EAAA,EAAD,CAAQf,KAAMA,EAAMgB,QAAST,GACzB,kBAACU,EAAA,EAAD,iBACA,kBAACC,EAAA,EAAD,KACI,2BAAOC,KAAK,OAAOC,YAAY,OAAOlB,KAAK,OAAOS,MAAON,EAAKH,KAAMmB,SAAUb,IAAe,6BAC7F,2BAAOW,KAAK,OAAOC,YAAY,cAAclB,KAAK,cAAcS,MAAON,EAAKF,YAAakB,SAAUb,IAAe,6BAClH,2BAAOW,KAAK,OAAOC,YAAY,YAAYlB,KAAK,WAAWS,MAAON,EAAKD,SAAUiB,SAAUb,IAAe,8BAE9G,kBAACc,EAAA,EAAD,KACI,4BAAQR,QAASP,GAAjB,UACA,4BAAQO,QAjBL,WACfhB,EAAMyB,QAAQlB,GACdE,MAeY,YCeLiB,E,YApDX,WAAY1B,GAAQ,IAAD,8BACf,4CAAMA,KAMV2B,WAAa,WACT,IAAMC,EAAM,CAACC,8CAAYC,4BAA4B,UAAUC,KAAK,IACpEC,MAAMJ,GACLK,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAY,OAAI,EAAKC,SAAS,CAACC,MAAMF,OAC1CG,OAAM,SAAAC,GAAG,OAAEC,QAAQC,MAAMF,OAV1B,EAAKG,MAAQ,CACTL,MAAQ,IAHG,E,qEAeX/B,GAAO,IAAD,OACJqB,EAAM,CAACC,8CAAYC,4BAA4B,UAAUC,KAAK,IACpEC,MAAMJ,EAAI,CACNgB,OAAQ,OACRC,QAAS,CACL,eAAe,oBAGnBC,KAAKC,KAAKC,UAAUzC,KAEvB0B,MAAK,SAAAgB,GAAG,OAAE,EAAKtB,gBACfY,OAAM,SAAAC,GAAG,OAAEC,QAAQC,MAAMF,Q,0CAI1BU,KAAKvB,e,+BAIL,IAAMwB,EAAU,CACZ,CAACC,OAAQ,QACHC,KAAM,SAAC9C,GACL,OAAO,yBAAK+C,OAAQ,GAAIC,MAAO,GAAIC,IAAKjD,EAAKkD,SAASnD,SAAUoD,IAAKnD,EAAKkD,SAASpD,gBAE3F,CAAC+C,OAAO,OAAQO,SAAU,QAC1B,CAACP,OAAO,cAAeO,SAAU,gBAErC,OACI,yBAAKC,UAAU,SACZ,kBAAC,IAAD,CAAYC,KAAMX,KAAKP,MAAML,MAAOa,QAASA,EAASW,QAAS,IAC/D,kBAAC,EAAD,CAASrC,QAASyB,KAAKzB,QAASE,WAAYuB,KAAKvB,kB,GA/C1CoC,aCiBPC,MAff,WACE,OACE,yBAAKJ,UAAU,OACb,kBAACK,EAAA,EAAD,CAAQC,SAAS,SAASC,MAAM,WAC9B,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKH,MAAM,WAA/B,WAKJ,kBAAC,EAAD,QCLcI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjD,MAAK,SAAAkD,GACjCA,EAAaC,kB","file":"static/js/main.1ae16dde.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nconst AddCake = (props) => {\n\n    const [open, setOpen] = useState(false);\n    const [cake, setCake] = useState({\n        name:'', description:'', imageURL: ''\n    });\n\n    // Open the modal form\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    // Close the modal form\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const handleChange = (event) => {\n        setCake({...cake,[event.target.name]: event.target.value});\n    }\n\n    const handleSave = () => {\n        props.addCake(cake);\n        handleClose();\n    }\n\n    return (\n        <div>\n            <button style={{margin:10}} onClick={handleClickOpen}>New Cake</button>\n            <Dialog open={open} onClose={handleClose}>\n                <DialogTitle>New cake</DialogTitle>\n                <DialogContent>\n                    <input type=\"text\" placeholder=\"Name\" name=\"name\" value={cake.name} onChange={handleChange}/><br/>\n                    <input type=\"text\" placeholder=\"Description\" name=\"description\" value={cake.description} onChange={handleChange}/><br/>\n                    <input type=\"text\" placeholder=\"Image URL\" name=\"imageURL\" value={cake.imageURL} onChange={handleChange}/><br/>\n                </DialogContent>\n                <DialogActions>\n                    <button onClick={handleClose}>Cancel</button>\n                    <button onClick={handleSave}>Save</button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    );\n};\n\nexport default AddCake;\n","import React, { Component } from 'react';\nimport ReactTable from 'react-table-6';\nimport 'react-table-6/react-table.css';\nimport AddCake from './AddCake';\n\nclass CakeApp extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            cakes : []\n        };\n    }\n\n    fetchCakes = () => {\n        const url = [process.env.REACT_APP_CAKE_API_ENDPOINT,'cakes/'].join('');\n        fetch(url)\n        .then(response => response.json())\n        .then(responseData => this.setState({cakes:responseData}))\n        .catch(err=>console.error(err));\n    }\n\n    addCake(cake) {\n        const url = [process.env.REACT_APP_CAKE_API_ENDPOINT,'cakes/'].join('');\n        fetch(url,{\n            method: 'POST',\n            headers: {\n                'Content-Type':'application/json',\n             //   'Access-Control-Allow-Origin':'*'\n            },\n            body:JSON.stringify(cake)\n        })\n        .then(res=>this.fetchCakes())\n        .catch(err=>console.error(err));\n    }\n\n    componentDidMount() {\n        this.fetchCakes();\n    }\n\n    render() {\n        const columns = [\n            {Header: \"Image\",\n                  Cell: (cake) => {\n                    return <img height={50} width={50} src={cake.original.imageURL} alt={cake.original.description}/>\n                  }},\n            {Header:'Name', accessor: 'name'},\n            {Header:'Description', accessor: 'description'},\n        ];\n        return(\n            <div className=\"Cakes\">\n               <ReactTable data={this.state.cakes} columns={columns} minRows={0} />\n               <AddCake addCake={this.addCake} fetchCakes={this.fetchCakes} />\n            </div>\n        );\n    }\n\n}\n\nexport default CakeApp;\n","import React from 'react';\nimport './App.css';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport CakeApp from './components/CakeApp';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AppBar position=\"static\" color=\"default\">\n        <Toolbar>\n          <Typography variant=\"h6\" color=\"inherit\">\n            Cakes\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <CakeApp />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}